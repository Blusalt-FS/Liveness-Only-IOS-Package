// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name LivenessOnlyFramework
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CommonCrypto
import DeveloperToolsSupport
import Foundation
import InternalModules
@_exported import LivenessOnlyFramework
import OptionallyDecodable
import Swift
import SwiftUI
import UIKit
import ZipArchive
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension Foundation.URLSession {
  public func downloadTaskPublisher(for url: Foundation.URL) -> LivenessOnlyFramework.DownloadTaskPublisher
  public func downloadTaskPublisher(for request: Foundation.URLRequest) -> LivenessOnlyFramework.DownloadTaskPublisher
}
public struct DownloadTaskPublisher {
}
extension LivenessOnlyFramework.DownloadTaskPublisher : Combine.Publisher {
  public typealias Output = (Foundation.URL, Foundation.URLResponse)
  public typealias Failure = Swift.Error
  public func receive<Subscriber>(subscriber: Subscriber) where Subscriber : Combine.Subscriber, Subscriber.Failure == any Swift.Error, Subscriber.Input == (Foundation.URL, Foundation.URLResponse)
}
public enum LivenessDetectionOnlyType {
  case STILL
  case MOTIONAL
  case FLASH
  public static func == (a: LivenessOnlyFramework.LivenessDetectionOnlyType, b: LivenessOnlyFramework.LivenessDetectionOnlyType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum LivenessFacialComparisonType {
  case STILL
  case MOTIONAL
  public static func == (a: LivenessOnlyFramework.LivenessFacialComparisonType, b: LivenessOnlyFramework.LivenessFacialComparisonType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SDKType {
  case FACIAL_COMPARISON
  case FACE_DETECTION
  public static func == (a: LivenessOnlyFramework.SDKType, b: LivenessOnlyFramework.SDKType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class LivenessOnlyManager : Foundation.ObservableObject {
  public static let shared: LivenessOnlyFramework.LivenessOnlyManager
  public func startFacialComparisonSDK(_ viewController: UIKit.UIViewController, clientId: Swift.String, appName: Swift.String, apiKey: Swift.String, isDev: Swift.Bool, fileByteData: Foundation.Data, livenessFacialComparisonType: LivenessOnlyFramework.LivenessFacialComparisonType, onComplete: ((_ livenessSuccess: LivenessOnlyFramework.LivenessSuccess) -> Swift.Void)?, onFailure: ((_ statusCode: Swift.Int, _ errorText: Swift.String) -> Swift.Void)?)
  public func startFaceDetectionOnlySDK(_ viewController: UIKit.UIViewController, clientId: Swift.String, appName: Swift.String, apiKey: Swift.String, isDev: Swift.Bool, livenessDetectionOnlyType: LivenessOnlyFramework.LivenessDetectionOnlyType, onComplete: ((_ livenessSuccess: LivenessOnlyFramework.LivenessSuccess) -> Swift.Void)?, onFailure: ((_ statusCode: Swift.Int, _ errorText: Swift.String) -> Swift.Void)?)
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct LivenessSuccess {
  public let isProcedureValidationPassed: Swift.Bool?
  public let comparisonData: LivenessOnlyFramework.ComparisonData?
  public let faceDetectionData: LivenessOnlyFramework.FaceDetectionData?
}
public struct ComparisonData {
  public let originalImage: Foundation.Data?
  public let isPassFaceComparison: Swift.Bool?
}
public struct FaceDetectionData {
  public let livenessImage: Foundation.Data?
  public let isPassFaceGenuineness: Swift.Bool?
}
extension LivenessOnlyFramework.LivenessDetectionOnlyType : Swift.Equatable {}
extension LivenessOnlyFramework.LivenessDetectionOnlyType : Swift.Hashable {}
extension LivenessOnlyFramework.LivenessFacialComparisonType : Swift.Equatable {}
extension LivenessOnlyFramework.LivenessFacialComparisonType : Swift.Hashable {}
extension LivenessOnlyFramework.SDKType : Swift.Equatable {}
extension LivenessOnlyFramework.SDKType : Swift.Hashable {}
